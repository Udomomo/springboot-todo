openapi: 3.0.0
info:
  title: Spring Boot Todo
  description: Todo application by Spring Boot
  version: 0.1.0
servers:
  - url: https://example.com/api/v0
    description: production API
  - url: http://{host}:{port}/api/v0
    description: for development
    variables:
      host:
        default: localhost
      port:
        default: '10080'
paths:
  /tasks:
    get:
      summary: List all tasks
      operationId: listTasks
      responses:
        '200':
          description: array of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        default:
          description: unexpected error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: add a new task
      operationId: addTask
      requestBody:
        description: task to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: unexpected error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{taskId}:
    put:
      summary: edit a task
      operationId: editTask
      parameters: 
        - name: taskId
          in: path
          required: true
          description: id of task
          schema:
            type: string
      requestBody:
        description: task to edit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: unexpected error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: archive done tasks
      operationId: archiveTasks
      parameters: 
        - name: taskId
          in: path
          required: true
          description: id of task
          schema:
            type: string
      responses:
        '200':
          description: archived task
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        default:
          description: unexpected error
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{taskId}/done:
    put:
      summary: make the task done
      operationId: doneTask
      parameters: 
        - name: taskId
          in: path
          required: true
          description: id of task
          schema:
            type: string
      responses:
        '200':
          description: done
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: No task is found with the specified id
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{taskId}/undone:
    put:
      summary: make the task undone
      operationId: undoneTask
      parameters: 
        - name: taskId
          in: path
          required: true
          description: id of task
          schema:
            type: string
      responses:
        '200':
          description: done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: No task is found with the specified id
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Task:
      description: one task object
      type: object
      allOf:
        - $ref: '#/components/schemas/TaskRequest'
        - required:
          - id
          - done
          properties:
            id:
              type: integer
              format: int64
            done:
              type: boolean
      example:
        id: 1
        content: Buy notebook
        urgency: 3
        importance: 3
        done: false
    TaskRequest:
      description: object to create or edit a new task
      type: object
      required:
        - content
        - urgency
        - importance
      properties:
        content:
          type: string
        urgency:
          type: integer
          format: int32
        importance:
          type: integer
          format: int32
      example:
        content: Buy notebook
        urgency: 3
        importance: 3
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Success:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: 200
        message: Success
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: 500
        message: Internal Server Error
